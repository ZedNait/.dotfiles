Settings without corresponding packages
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :preface
  (defvar zed/indent-width 2)
  :config
  (setq frame-title-format '("Yay-Evil") ; Yayyyyy Evil!
        ring-bell-function 'ignore
        frame-resize-pixelwise t
        default-directory "~/")

  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; better scrolling experience
  (setq scroll-margin 0
        scroll-conservatively 10000
        scroll-preserve-screen-position t
        auto-window-vscroll nil)

  ;; increase line space for better readability
  (setq-default line-spacing 3)

  ;; Always use spaces for indentation
  (setq-default indent-tabs-mode nil
                tab-width zed/indent-width))
#+END_SRC

Omit default startup screen
#+BEGIN_SRC emacs-lisp
(use-package "startup"
  :ensure nil
  :config (setq inhibit-startup-screen t))
#+END_SRC

Modernise selection behaviour
#+BEGIN_SRC emacs-lisp
(use-package delsel
  :ensure nil
  :config (delete-selection-mode +1))
#+END_SRC

Disable scroll-bar
#+BEGIN_SRC emacs-lisp
(use-package scroll-bar
  :ensure nil
  :config (scroll-bar-mode -1))
#+END_SRC

Enable column numbers
#+BEGIN_SRC emacs-lisp
(use-package simple
  :ensure nil
  :config (column-number-mode +1))
#+END_SRC

Split right and split below
#+BEGIN_SRC emacs-lisp
(use-package "window"
  :ensure nil
  :preface
  (defun zed/split-and-follow-horizontally ()
    "Split window below."
    (interactive)
    (split-window-below)
    (other-window 1))
  (defun zed/split-and-follow-vertically ()
    "Split window right."
    (interactive)
    (split-window-right)
    (other-window 1))
  :config
  (global-set-key (kbd "C-x 2") #'zed/split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") #'zed/split-and-follow-vertically))
#+END_SRC

File-related tweaks
#+BEGIN_SRC emacs-lisp
(use-package files
  :ensure nil
  :config
  (setq confirm-kill-processes nil
        make-backup-files nil
        auto-save-default nil))
#+END_SRC

Automatically refreshes the buffer for changes outside of Emacs
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :ensure nil
  :config
  (global-auto-revert-mode +1)
  (setq auto-revert-interval 2
        auto-revert-check-vc-info t
        global-auto-revert-non-file-buffers t
        auto-revert-verbose nil))
#+END_SRC

Eldoc: documentation in the mini-buffer
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :ensure nil
  :diminish eldoc-mode
  :config
  (global-eldoc-mode +1)
  (setq eldoc-idle-delay 0.4))
#+END_SRC

Indentation improvement
#+BEGIN_SRC emacs-lisp
;; JavaScript
(use-package js
  :ensure nil
  :config (setq js-indent-level zed/indent-width))

;; Python (both v2 and v3)
(use-package python
  :ensure nil
  :config (setq python-indent-offset 4))

(use-package lsp-mode
  :hook ((js-mode
          js-jsx-mode
          typescript-mode
          ) . lsp)
  :commands lsp
  :config
  (setq lsp-auto-guess-root t)
  ;; (setq lsp-diagnostic-package :none)
  (setq lsp-enable-symbol-highlighting nil)
  (setq lsp-enable-on-type-formatting nil)
  (setq lsp-signature-auto-activate nil)
  (setq lsp-enable-folding nil)
  (setq lsp-enable-snippet nil)
  (setq lsp-enable-completion-at-point nil)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq lsp-idle-delay 0.5)
  (setq lsp-prefer-capf t)
  (add-to-list 'lsp-language-id-configuration '(js-jsx-mode . "javascriptreact"))
)
#+END_SRC

Mouse wheel scroll speed
#+BEGIN_SRC emacs-lisp
(use-package mwheel
  :ensure nil
  :config (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
                mouse-wheel-progressive-speed nil))
#+END_SRC

Show matching parentheses
#+BEGIN_SRC emacs-lisp
(use-package paren
  :ensure nil
  :init (setq show-paren-delay 0)
  :config (show-paren-mode +1))
#+END_SRC

Setting up some frame defaults
#+BEGIN_SRC emacs-lisp
(use-package frame
  :ensure nil
  :config
  ;; (setq initial-frame-alist (quote ((fullscreen . maximized))))
  (setq initial-frame-alist '((width . 100) (height . 55)))
  (when (member "Hack" (font-family-list))
    (set-frame-font "hack-13:weight=regular" t t)))
#+END_SRC

Ediff tweaks
#+BEGIN_SRC emacs-lisp
(use-package ediff
  :ensure nil
  :config (setq ediff-split-window-function 'split-window-horizontally))
#+END_SRC

Auto-pairing quotes and parentheses etc.
#+BEGIN_SRC emacs-lisp
(use-package elec-pair
  :ensure nil
  :hook (prog-mode . electric-pair-mode))
#+END_SRC

Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :ensure nil
  :hook (before-save . whitespace-cleanup))
#+END_SRC

Dired tweaks
#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :config
  (setq delete-by-moving-to-trash t)
  (eval-after-load "dired"
    #'(lambda ()
        (put 'dired-find-alternate-file 'disabled nil)
        (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+END_SRC

Dump custom-set-variables to a garbage file and donâ€™t load it
#+BEGIN_SRC emacs-lisp
(use-package cus-edit
  :ensure nil
  :config
  (setq custom-file "~/.emacs.d/to-be-dumped.el"))
#+END_SRC

Load theme
#+BEGIN_SRC emacs-lisp
(use-package kaolin-themes
  :config
  (load-theme 'kaolin-light t)
  ;;(kaolin-treemacs-theme)
  )
#+END_SRC

Dashboard welcom page
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner "~/.emacs.d/yay-evil.png"
        dashboard-banner-logo-title "Yay Evil!"
        dashboard-items nil
        dashboard-set-footer nil))
#+END_SRC

Syntax highlighting
#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))

(use-package highlight-operators
  :hook (prog-mode . highlight-operators-mode))

(use-package highlight-escape-sequences
  :hook (prog-mode . hes-mode))
#+END_SRC

Vi keybindings
#+BEGIN_SRC emacs-lisp
(use-package evil
  :diminish undo-tree-mode
  :init
  (setq evil-want-C-u-scroll t
        evil-want-keybinding nil
        evil-shift-width zed/indent-width)
  :hook (after-init . evil-mode)
  :preface
  (defun zed/save-and-kill-this-buffer ()
    (interactive)
    (save-buffer)
    (kill-this-buffer))
  :config
  (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
    (define-key evil-insert-state-map (kbd "C-n") nil)
    (define-key evil-insert-state-map (kbd "C-p") nil))
  (evil-ex-define-cmd "q" #'kill-this-buffer)
  (evil-ex-define-cmd "wq" #'zed/save-and-kill-this-buffer))

(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-company-use-tng nil)
  (evil-collection-init))

(use-package evil-commentary
  :after evil
  :diminish
  :config (evil-commentary-mode +1))

(use-package evil-magit)
#+END_SRC

Git Integration
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)
  :config (add-hook 'with-editor-mode-hook #'evil-insert-state))
#+END_SRC

Ido, ido-vertical, ido-ubiquitous and fuzzy matching
#+BEGIN_SRC emacs-lisp
(use-package ido
  :config
  (ido-mode +1)
  (setq ido-everywhere t
        ido-enable-flex-matching t))

(use-package ido-vertical-mode
  :config
  (ido-vertical-mode +1)
  (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))

(use-package ido-completing-read+ :config (ido-ubiquitous-mode +1))

(use-package flx-ido :config (flx-ido-mode +1))
#+END_SRC

Company for auto-completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :hook (prog-mode . company-mode)
  :config
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.1
        company-selection-wrap-around t
        company-tooltip-align-annotations t
        company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                            company-echo-metadata-frontend))
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)))
#+END_SRC

Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck :config (global-flycheck-mode +1))
#+END_SRC

Org Mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :hook ((org-mode . visual-line-mode)
         (org-mode . org-indent-mode)))

(use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC

Yasnippet & yasnippet-snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :preface (defvar tmp/company-point nil)
  :config
  (yas-global-mode +1)
  (advice-add 'company-complete-common
              :before
              #'(lambda ()
                  (setq tmp/company-point (point))))
  (advice-add 'company-complete-common
              :after
              #'(lambda ()
                  (when (equal tmp/company-point (point))
                    (yas-expand)))))

(use-package yasnippet-snippets)
#+END_SRC

Useful major models
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode :hook (markdown-mode . visual-line-mode))

(use-package json-mode)
#+END_SRC

Diminish minor models
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :demand t)
#+END_SRC

Wich-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode +1)
  (setq which-key-idle-delay 0.4
        which-key-idle-secondary-delay 0.4))
#+END_SRC

Configure PATH on macOS
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config (when (memq window-system '(mac ns x))
            (exec-path-from-shell-initialize)))
#+END_SRC
